# Copyright 2018 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import sys
import unittest
import shlex
import subprocess
import yaml

os.chdir('./' + os.path.dirname(__file__))
sys.path.append('../../container')

from gcb_yaml_gen_utils import create_similar_steps, create_gcb_yaml_dict, gen_gcb_yaml_file
from build import get_version_step, get_build_step, get_retag_step, get_test_step, get_upload_debs_step


class TestYamlGeneration(unittest.TestCase):
  """ Test case for comparing autogenerated yaml files with expected content.

  """

  def test_simple_yaml(self):
    """ Test a simple GCB yaml file.

    """
    # generate GCB yaml file using the autogeneration logic
    two_steps = create_similar_steps(
        name_list=[
            'gcr.io/asci-toolchain/nosla-ubuntu16_04-bazel-docker-gcloud:0.17.1'
        ],
        args_list=[['pwd'], ['hello world']],
        env_list=[[
            'CLOUDSDK_COMPUTE_ZONE=us-east1-b',
            'CLOUDSDK_CONTAINER_CLUSTER=node-example-cluster'
        ], ['FOO=foo', 'BAR=bar']],
        step_dir_list=['/some_dir', None],
        step_id_list=['print-working-directory', None],
        waitFor_list=[['-'], ['print-working-directory']],
        entrypoint_list=[None, 'echo'],
        secretEnv_list=[['MY_SECRET'], None],
        volumes_list=[[['vol1', '/persistent_volume']], None],
        timeout_list=['500s', None])
    gcb_yaml_dict = create_gcb_yaml_dict(steps=two_steps)
    generated_yaml = 'gen_cloudbuild_helloworld.yaml'
    gen_gcb_yaml_file(gcb_yaml_dict, generated_yaml)

    # simplify target yaml file to perform comparison
    target_yaml = 'simplified_cloudbuild_helloworld.yaml'
    resave_yaml('cloudbuild_helloworld.yaml', target_yaml)

    self.assertEqual(file_to_str(target_yaml), file_to_str(generated_yaml))

    # cleanup generated yaml files
    remove_files(target_yaml, generated_yaml)

  def test_cloudbuild_yaml(self):
    """ Test cloudbuild GCB yaml file used to build a Bazel container.

    """
    # define constants used to generate GCB steps
    bazel_version = '0.17.1'
    package = 'container/ubuntu16_04/builders/bazel'
    target = 'bazel_0.17.1'
    project = 'asci-toolchain'
    container = 'test-bazel'
    tag = '0.17.1'
    tarball = 'test_tarball.tar.gz'
    bucket = 'test_bucket'

    # generate GCB yaml file using the autogeneration logic
    gcb_steps = [
        get_version_step(bazel_version),
        get_build_step(package, target, bazel_version),
        get_retag_step(project, container, tag, package, target, bazel_version),
        get_test_step(package, target, bazel_version),
        get_upload_debs_step(container, tag, package, bazel_version, bucket,
                             tarball)
    ]

    gcb_yaml_dict = create_gcb_yaml_dict(
        steps=gcb_steps,
        timeout='21600s',
        images=['gcr.io/{}/{}:{}'.format(project, container, tag)])

    generated_yaml = 'gen_cloudbuild.yaml'
    gen_gcb_yaml_file(gcb_yaml_dict, generated_yaml)

    # simplify target yaml file to perform comparison
    target_yaml = 'simplified_cloudbuild.yaml'
    resave_yaml('cloudbuild.yaml', target_yaml)

    self.assertEqual(file_to_str(target_yaml), file_to_str(generated_yaml))

    # cleanup generated yaml files
    remove_files(target_yaml, generated_yaml)


###############################################################################
##########                     HELPER FUNCTIONS                      ##########
###############################################################################


def resave_yaml(src, dest):
  """ Generate a "simpler" version of a yaml file at src.

  "Simpler" version of yaml here implies removing all unnecessary content from a
  yaml file. This includes comments and quotes where they are not required.
  """
  with open(src, 'r') as stream:
    try:
      yaml_dict = yaml.load(stream)
      with open(dest, 'w') as outfile:
        yaml.dump(yaml_dict, outfile, default_flow_style=False)
    except yaml.YAMLError as exc:
      print(exc)


def file_to_str(file_path):
  """ Returns a the content of a given file as a string

  """
  str_content = ''
  with open(file_path, 'r') as file:
    str_content = file.read()
  return str_content


def remove_files(*args):
  """ Removes all files in the given paths.

  """
  for file in args:
    subprocess.check_call(shlex.split('rm -f {}'.format(file)))


if __name__ == '__main__':
  unittest.main()
